import Head from 'next/head'
import styles from '@/styles/Home.module.scss'
import {useCallback, useRef, useState} from "react";
import produce from "immer";

const ROWS = 50;
const COL = 50;

const neighbourCoordinates = [
    [0,1],
    [0,-1],
    [1,0],
    [-1,0],
    [-1,1],
    [-1,-1],
    [1,1],
    [1,-1]
]

const findCellNeighbours = (i: number, j: number, grid: any[][]): number => {
    let neighbours = 0
    neighbourCoordinates.forEach(([x,y]) => {
        const newI = i + x;
        const newJ = j + y;
        if(
            newI >= 0 && newI < ROWS &&
            newJ >= 0 && newJ < COL
        ) {
            neighbours += grid[newI][newJ]
        }
    })
    return neighbours
}

export default function Home() {


    const [grid, setGrid] = useState(() => {
        const rows = [];
        for(let i = 0; i < ROWS; i++) {
            rows.push(
                new Array(COL).fill(0)
            )
        }
        return rows
    })

    const [stepTimeInterval, setStepTimeInterval] = useState<number>(10)
    const [running, setRunning] = useState(false)

    const runningRef = useRef(running)
    runningRef.current = running

    const stepTimeIntervalRef = useRef(stepTimeInterval)
    stepTimeIntervalRef.current = stepTimeInterval

    // useCallback - function created only once
    const runSimulation = useCallback(
        () => {
            if (!runningRef.current) {
               return;
            }
            setGrid((currentGrid) => {
                return produce(currentGrid, newGrid => {
                    for (let i = 0; i < ROWS; i++) {
                        for (let j = 0; j < COL; j++) {

                            //for each cell check how many neighbours it has
                            let neighbours = findCellNeighbours(i,j, currentGrid)

                            //Check overpopulation and underpopulation
                            if (neighbours < 2 || neighbours > 3) {
                                newGrid[i][j] = 0;
                            } else if (currentGrid[i][j] === 0 && neighbours === 3) {
                                newGrid[i][j] = 1;
                            }
                        }
                    }
                })
            })

            setTimeout(runSimulation, stepTimeIntervalRef.current)
        },
        [],
    );
    

  return (
    <>
      <Head>
        <title>Game of Life - Filip</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        <div className={styles.dashboard}>
            <button onClick={() => {
                setRunning(!running)
                if(!running) {
                    runningRef.current = true;
                    stepTimeIntervalRef.current = stepTimeInterval
                    runSimulation()
                }
            }} className={styles.startButton}>{running ? "stop" : "start"}</button>
            <input className={styles.input} type={"number"} placeholder={"10"} value={stepTimeInterval}
                   onChange={(event) => {
                       setStepTimeInterval(parseInt(event.target.value))
                       console.log()
                   }
            } />
        </div>

        <div className={styles.hello} style={{
            display: "grid",
            gridTemplateColumns: `repeat(${COL}, 20px)`,
            gap: 1
        }}>
            {grid.map((rows, i) => {
                return rows.map( (col, j) => {
                    return <div
                        key={`${i} - ${j}`}
                                onClick={() => {
                                    const newGrid = produce(grid, updatedGrid => {
                                        updatedGrid[i][j] = grid[i][j] == 1 ? 0 : 1;
                                    })
                                    setGrid(newGrid)
                                }
                        }
                        style={{
                            width: 22,
                            height: 22,
                            backgroundColor: grid[i][j] == 1 ? "blue" : "white",
                            margin: "1px",
                            border: "1px solid grey",
                            borderRadius: "3px",
                            transition: ".1s linear",
                            cursor: "pointer"
                    }}
                    className={styles.cell}
                    ></div>
                })
            })}
        </div>
    </>
  )
}
